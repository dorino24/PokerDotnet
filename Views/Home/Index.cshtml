@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <div id="loby" class="justify-content-center " style="margin-top: 200px;">
        <h1 class="mb-5" style="font-size: 70px;">POKER</h1>
        <div class="d-flex justify-content-center">
            <div class="w-25">
                <h5 class="my-2">Insert your name</h5>
                <input class="my-2 form-control form-control-sm border border-dark" type="text" id="playerName">
                <button class="my-2 btn btn-primary btn-lg btn-warning" id="playGame">Play</button>
            </div>
        </div>
    </div>
    @await Html.PartialAsync("Game.cshtml")
</div>

@section Scripts {
    <script text="text/javascript">
        var playerChips = 0;
        var playerBet = 0;
        var prevBet = 0;
        var currentStage = "PreFlop";
        var currentPot = 0;
        var dealerCards = [];
        var opponentName = [];
        const timeLimit = 15000;
        let timer;


        $(document).ready(function () {

            var playerNameChipsBet = [];
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/pokerHub")
                .build();

            $('#playGame').on('click', function () {
                playerName = $('#playerName').val();
                if (playerName == '') {
                    alert('please fill your name');
                    return;
                }

                connection.start()
                    .then(() => {
                        if (playerName) {
                            connection.invoke("JoinGame", playerName)
                                .catch(err => console.error("Failed to join table:", err.toString()));
                        }
                    })
                    .catch(err => console.error("Failed to connect to the Hub:", err.toString()));
            });


            connection.on("PlayerJoined", (message, check) => {
                if (check) {
                    $('#loby').addClass('d-none');
                    $('#mainGame').removeClass('d-none');
                    $("#namePlayer1").text(playerName);
                } else {
                    alert(message);
                    connection.stop()
                        .then(() => console.log("Connection stopped."))
                        .catch(err => console.error("Error stopping connection:", err));
                }
                console.log(message);
            });
            connection.on("InitalNewStage", (stage, pot) => {
                console.log(stage);
                currentStage = stage;
                currentPot = pot;
                playerNameChipsBet.forEach(player => {
                    player.bet = 0;
                });
                $('#pot').text("POT : $" + currentPot);
                updatePlayerUI(playerNameChipsBet);

                if (currentStage == 1) {
                    $('#dealerCard1').attr('src', `/assets/${dealerCards[0]}.svg`);
                    $('#dealerCard2').attr('src', `/assets/${dealerCards[1]}.svg`);
                    $('#dealerCard3').attr('src', `/assets/${dealerCards[2]}.svg`);
                } else if (currentStage == 2) {
                    $('#dealerCard4').attr('src', `/assets/${dealerCards[3]}.svg`);
                } else if (currentStage == 3) {
                    $('#dealerCard5').attr('src', `/assets/${dealerCards[4]}.svg`);
                }
            });

            connection.on("InitialGame", (name, chips, cards, bet, dealerCard) => {
                let playerAndChips = { name: name, chips: chips, bet: bet };
                playerNameChipsBet.push(playerAndChips);
                if (name == playerName) {
                    console.log(cards);
                    $('#playercard1').attr('src', `/assets/${cards[0]}.svg`);
                    $('#playercard2').attr('src', `/assets/${cards[1]}.svg`);
                    dealerCard.forEach(card => {
                        dealerCards.push(card)
                    });
                }
            });

            connection.on("GameStarted", (message, listPlayer) => {
                $('#waitInfo').text(message);
                var opponentIndex = 2;
                listPlayer.forEach((player) => {
                    if (player != playerName) {
                        var opponent = { Index: opponentIndex, name: player };
                        opponentName.push(opponent);
                        opponentIndex++;
                    }
                });
                updatePlayerUI(playerNameChipsBet);
            });
            connection.on("Winner", (winnerName, highestRangking, winnerChips) => {
                playerNameChipsBet.forEach((player) => {
                    if (player.name == winnerName) {
                        player.chips = winnerChips;
                    };
                });
                updatePlayerUI(playerNameChipsBet);
                $('#waitInfo').text("Winner : " + winnerName + " with " + highestRangking);
                currentPot = 0;
                $('#pot').text("POT : $" + currentPot);
                $('#btn-nextRound').removeClass('d-none');
                playerNameChipsBet = [];
                dealerCards = [];
            })

            $('#btn-nextRound').on('click', function () {
                connection.invoke("NextRound")
                    .catch(err => console.error("Failed to send action:", err.toString()));
                $('#btn-nextRound').addClass('d-none');
                $('#waitInfo').text("Waiting Opponent");
                for (var i = 1; i <= 5; i++) {
                    if (i == 2 || i == 3) {
                        $(`#player${i}Card1`).attr('src', `/assets/backside_card.svg`);
                        $(`#player${i}Card2`).attr('src', `/assets/backside_card.svg`);
                    }
                    $(`#dealerCard${i}`).attr('src', `/assets/backside_card.svg`);
                };
                $('#playercard1').attr('src', `/assets/backside_card.svg`);
                $('#playercard2').attr('src', `/assets/backside_card.svg`);
            })

            connection.on("ShowAllCards", (playerName, cards) => {
                opponentName.forEach(opponent => {
                    if (playerName == opponent.name) {
                        $(`#player${opponent.Index}Card1`).attr('src', `/assets/${cards[0]}.svg`);
                        $(`#player${opponent.Index}Card2`).attr('src', `/assets/${cards[1]}.svg`);
                    }
                })
            });

            connection.on("PlayerTurn", (prevPlayerNameTurn, newChips, newBet, currentPlayerNameTurn) => {
                console.log(`It's now ${currentPlayerNameTurn}'s turn.`);
                for (let i = 0; i < playerNameChipsBet.length; i++) {
                    if (playerNameChipsBet[i].name == prevPlayerNameTurn) {
                        playerNameChipsBet[i].chips = newChips;
                        playerNameChipsBet[i].bet = newBet;
                        prevBet = newBet;
                    }
                }
                console.log("name:" + prevPlayerNameTurn);
                updatePlayerUI(playerNameChipsBet);
                if (currentPlayerNameTurn == playerName) {
                    $('#action input').prop('disabled', false);
                    if (prevBet == 0 || playerBet == prevBet) {
                        $("#Call").prop('disabled', true);
                    }
                    if (prevBet != 0 && playerBet != prevBet) {
                        $("#Check").prop('disabled', true);
                    }
                    timer = setTimeout(() => defaultAction(playerName), timeLimit);
                }
            });

            function defaultAction(playerName) {
                console.log(`Time's up! ${playerName} did not act in time.`);
                connection.invoke("PlayerTurn", playerName, "Fold", 0)
                    .catch(err => console.error("Failed to send action:", err.toString()));

                $('#playercard1').attr('src', `/assets/backside_card.svg`);
                $('#playercard2').attr('src', `/assets/backside_card.svg`);
                $('#action input').prop('disabled', true);
                $('#action input').prop('checked', false);
            }

            $('input[name="options"]').on('click', function () {
                const selectedOption = $(this).attr('id');
                console.log(`Selected option: ${selectedOption}`);
                value = 0;

                clearTimeout(timer);
                if (selectedOption == "Raise") {
                    var raiseAmount = $("#raiseAmount").val();
                    if (raiseAmount > playerChips || raiseAmount <= prevBet) {
                        alert("failed to raise")
                        return;
                    } else {
                        value = raiseAmount;
                    }
                }
                if (selectedOption == "Fold") {
                    $('#playercard1').attr('src', `/assets/backside_card.svg`);
                    $('#playercard2').attr('src', `/assets/backside_card.svg`);
                }

                connection.invoke("PlayerTurn", playerName, selectedOption, parseInt(value, 10))
                    .catch(err => console.error("Failed to send action:", err.toString()));

                $('#action input').prop('disabled', true);
                $('#action input').prop('checked', false);
            });
        });

        function updatePlayerUI(playerNameChipsBet) {
            var index = 2;
            playerNameChipsBet.forEach((player) => {
                if (player.name == playerName) {
                    playerChips = player.chips;
                    playerBet = player.bet;
                    $("#namePlayer1").text(player.name);
                    $("#chipsPlayer1").text("$" + player.chips);
                    $("#betPlayer1").text("$" + player.bet);
                } else {
                    opponentName.forEach((opponent) => {
                        if (player.name == opponent.name) {
                            $(`#namePlayer${opponent.Index}`).text(player.name);
                            $(`#chipsPlayer${opponent.Index}`).text("$" + player.chips);
                            $(`#betPlayer${opponent.Index}`).text("$" + player.bet);
                        }
                    });
                }
            });
        }
    </script>
}