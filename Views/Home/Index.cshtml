@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <div id="loby" class="justify-content-center " style="margin-top: 200px;">
        <h1 class="mb-5" style="font-size: 70px;">POKER</h1>
        <div class="d-flex justify-content-center">
            <div class="w-25">
                <h5 class="my-2">Insert your name</h5>
                <input class="my-2 form-control form-control-sm border border-dark" type="text" id="playerName">
                <button class="my-2 btn btn-primary btn-lg btn-warning" id="playGame">Play</button>
            </div>
        </div>
    </div>
    @await Html.PartialAsync("Game.cshtml")
</div>

@section Scripts {
    <script text="text/javascript">
        var playerChips = 0;
        var playerBet = 0;
        var currentBet = 0;
        $(document).ready(function () {

            var playerNameChipsBet = [];
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("/pokerHub")
                .build();

            $('#playGame').on('click', function () {
                playerName = $('#playerName').val();
                if (playerName == '') {
                    alert('please fill your name');
                    return;
                }
                $('#loby').addClass('d-none');
                $('#mainGame').removeClass('d-none');

                connection.start()
                    .then(() => {
                        if (playerName) {
                            connection.invoke("JoinGame", playerName)
                                .catch(err => console.error("Failed to join table:", err.toString()));
                        }
                    })
                    .catch(err => console.error("Failed to connect to the Hub:", err.toString()));
                $("#namePlayer1").text(playerName);
            });

            connection.on("PlayerHand", (name, chips, cards, bet, dealerCard) => {

                /* $('#dealerCard1').attr('src', `/assets/${dealerCard[0].value}_${dealerCard[0].suit}.svg`);
                 $('#dealerCard2').attr('src', `/assets/${dealerCard[1].value}_${dealerCard[1].suit}.svg`);
                 $('#dealerCard3').attr('src', `/assets/${dealerCard[2].value}_${dealerCard[2].suit}.svg`);*/

                let playerAndChips = { name: name, chips: chips, bet: bet };
                playerNameChipsBet.push(playerAndChips);
                if (name == playerName) {
                    var assetCard1 = `/assets/${cards[0].value}_${cards[0].suit}.svg`;
                    var assetCard2 = `/assets/${cards[1].value}_${cards[1].suit}.svg`;
                    $('#playercard1').attr('src', assetCard1);
                    $('#playercard2').attr('src', assetCard2);
                }
            });

            connection.on("GameStarted", message => {
                $('#waitInfo').text(message);
                updatePlayerUI(playerNameChipsBet);
            });

            connection.on("PlayerTurn", (currentPlayerName, newChips, newBet, nextPlayerName) => {
                console.log(`It's now ${nextPlayerName}'s turn.`);
                currentBet = newBet;
                for (let i = 0; i < playerNameChipsBet.length; i++) {
                    if (playerNameChipsBet[i].name == currentPlayerName) {
                        playerNameChipsBet[i].chips = newChips;
                        playerNameChipsBet[i].bet = newBet;
                    }
                }
                console.log("axa");
                updatePlayerUI(playerNameChipsBet);

                if (nextPlayerName == playerName) {
                    $('#action input').prop('disabled', false);
                }
            });

            $('input[name="options"]').on('click', function () {
                const selectedOption = $(this).attr('id');
                console.log(`Selected option: ${selectedOption}`);
                value = 0;
                if (selectedOption == "Raise") {
                    var raiseAmount = $("#raiseAmount").val();
                    if (raiseAmount > playerChips || raiseAmount <= currentBet) {
                        alert("failed to raise")
                        return;
                    } else {
                        value = raiseAmount;
                    }
                }
                connection.invoke("SendPlayerAction", playerName, selectedOption, parseInt(value, 10))
                    .catch(err => console.error("Failed to send action:", err.toString()));

                $('#action input').prop('disabled', true);
                $('#action input').prop('checked', false);
            });
        });

        function updatePlayerUI(playerNameChipsBet) {
            var index = 2;
            playerNameChipsBet.forEach((player) => {
                if (player.name == playerName) {
                    playerChips = player.chips;
                    playerBet = player.bet;
                    $("#namePlayer1").text(player.name);
                    $("#chipsPlayer1").text("$" + player.chips);
                    $("#betPlayer1").text("$" + player.bet);
                } else {
                    var playerNameSelector = `#namePlayer${index}`;
                    var playerChipsSelector = `#chipsPlayer${index}`;
                    var playerBetSelector = `#betPlayer${index}`;
                    $(playerNameSelector).text(player.name);
                    $(playerChipsSelector).text("$" + player.chips);
                    $(playerBetSelector).text("$" + player.bet);
                    index++;
                }
            });
        }
    </script>
}